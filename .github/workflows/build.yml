name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  AWS_URL_PROD: https://aoc.martincostello.com
  AZURE_URL_PROD: https://adventofcode-martincostello.azurewebsites.net
  AZURE_WEBAPP_NAME: adventofcode-martincostello
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_NOLOGO: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  FORCE_COLOR: 1
  NUGET_XMLDOC_MODE: skip
  TERM: xterm

permissions: {}

jobs:
  build:
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    env:
      CONTAINER_REGISTRY: '${{ github.repository_owner }}.azurecr.io'
      PUBLISH_CONTAINER: ${{ github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch && matrix.os-name == 'linux' }}

    outputs:
      container-tag: ${{ steps.publish-container.outputs.container-tag }}
      lambda-tools-version: ${{ steps.get-lambda-tools-version.outputs.lambda-tools-version }}

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os-name: macos
            runner: macos-latest
          - os-name: linux
            runner: ubuntu-latest
          - os-name: windows
            runner: windows-latest

    steps:

    - name: Update agent configuration
      shell: pwsh
      run: |
        if ($IsWindows) {
          "DOTNET_INSTALL_DIR=D:\tools\dotnet" >> ${env:GITHUB_ENV}
          "DOTNET_ROOT=D:\tools\dotnet" >> ${env:GITHUB_ENV}
          "NUGET_PACKAGES=D:\.nuget\packages" >> ${env:GITHUB_ENV}
        } else {
          $nugetHome = "~/.nuget/packages"
          if (-Not (Test-Path $nugetHome)) {
            New-Item -Path $nugetHome -Type Directory -Force | Out-Null
          }
          $nugetHome = Resolve-Path $nugetHome
          "NUGET_PACKAGES=$nugetHome" >> ${env:GITHUB_ENV}
        }

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0

    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: '24.x'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: |
        "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Setup NuGet cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Install .NET tools
      run: dotnet tool restore

    - name: Build, test and publish
      id: build
      shell: pwsh
      run: ./build.ps1

    - name: Publish lambda
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: runner.os == 'Linux' && success()
      with:
        name: lambda
        path: ./artifacts/publish/lambda.zip
        if-no-files-found: error

    - name: Docker log in
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      if: env.PUBLISH_CONTAINER == 'true'
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_REGISTRY_USERNAME }}
        password: ${{ secrets.ACR_REGISTRY_PASSWORD }}

    - name: Publish container
      id: publish-container
      if: runner.os == 'Linux'
      shell: pwsh
      env:
        ContainerRegistry: ${{ env.PUBLISH_CONTAINER == 'true' && env.CONTAINER_REGISTRY || '' }}
      run: |
        dotnet publish ./src/AdventOfCode.Site --arch x64 --os linux -p:PublishProfile=DefaultContainer

    - name: Attest container image
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
      if: steps.publish-container.outputs.container-digest != ''
      with:
        push-to-registry: true
        subject-digest: ${{ steps.publish-container.outputs.container-digest }}
        subject-name: ${{ steps.publish-container.outputs.container-image }}

    - name: Publish screenshots
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: screenshots-${{ matrix.os-name }}
        path: ./artifacts/screenshots/*.png
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: traces-${{ matrix.os-name }}
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: videos-${{ matrix.os-name }}
        path: ./artifacts/videos/*
        if-no-files-found: ignore

    - name: Get Amazon Lambda tools version
      id: get-lambda-tools-version
      shell: pwsh
      run: |
        $lambdaToolsVersion = (Get-Content "./.config/dotnet-tools.json" | Out-String | ConvertFrom-Json).tools.'amazon.lambda.tools'.version
        "lambda-tools-version=${lambdaToolsVersion}" >> ${env:GITHUB_OUTPUT}

    - name: Upload any crash dumps
      shell: pwsh
      if: |
        !cancelled() &&
        steps.build.outcome == 'failure' &&
        github.event.repository.fork == false &&
        !contains(fromJSON('["dependabot[bot]", "github-actions[bot]", "renovate[bot]"]'), github.event.pull_request.user.login)
      env:
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.CRASH_DUMPS_STORAGE_CONNECTION_STRING }}
        # renovate: datasource=github-releases depName=PSCompression packageName=santisq/PSCompression
        PSCOMPRESSION_VERSION: '3.0.1'
      run: |
        $dumps = Get-ChildItem -Path ${env:GITHUB_WORKSPACE} -Filter "*.dmp" -Recurse
        if ($null -ne $dumps) {

          $container = ${env:GITHUB_REPOSITORY}.Replace("/", "-")
          az storage container create --name $container --public-access off | Out-Null

          Install-Module PSCompression -RequiredVersion ${env:PSCOMPRESSION_VERSION} -AcceptLicense -Force -Scope CurrentUser

          $dumps | ForEach-Object {
            $zipPath = $_.FullName + ".zip"
            $zipName = $_.Name + ".zip"

            Write-Output "Compressing crash dump $($_.Name)..."
            Compress-ZipArchive -Path $_.FullName -Destination $zipPath

            az storage blob upload `
              --container-name $container `
              --file $zipPath `
              --name $zipName `
              --metadata "GITHUB_RUN_ATTEMPT=${env:GITHUB_RUN_ATTEMPT}" "GITHUB_WORKFLOW=${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}/actions/runs/${env:GITHUB_RUN_ID}" "RUNNER_OS=${env:RUNNER_OS}" `
              --overwrite true

            if ($LASTEXITCODE -eq 0) {
              Write-Output "::notice::Uploaded crash dump $($_.Name) to Azure Storage."
            }
          }
        }

  typescript:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: '24.x'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: |
        "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Build and test
      working-directory: ./src/AdventOfCode.Site
      run: |
        npm ci
        npm run all

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy-production:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    needs: [ build, typescript ]
    runs-on: ubuntu-latest
    concurrency: production_environment

    environment:
      name: production
      url: ${{ env.AZURE_URL_PROD }}

    permissions:
      id-token: write

    steps:

    - name: Azure log in
      uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy container to Azure App Service
      uses: azure/webapps-deploy@657f0700ea5214d56a0400d8ac5e8023c963d25d # v3.0.6
      if: needs.build.outputs.container-tag != ''
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{ needs.build.outputs.container-tag }}

    - name: Check application health
      shell: pwsh
      env:
        APPLICATION_URL: ${{ env.AZURE_URL_PROD }}
      run: |
        $delay = 10
        $limit = 15
        $success = $false
        for ($i = 0; $i -lt $limit; $i++) {
          $response = $null
          try {
            $response = Invoke-WebRequest -Uri "${env:APPLICATION_URL}/version" -Method Get -UseBasicParsing
          } catch {
            $response = $_.Exception.Response
          }
          if (($null -ne $response) -And ($response.StatusCode -eq 200)) {
            $json = $response.Content | ConvertFrom-Json
            $version = $json.applicationVersion
            if ((-Not [string]::IsNullOrWhiteSpace($version)) -And $version.Contains(${env:GITHUB_SHA})) {
              $success = $true
              break
            }
          }
          Start-Sleep -Seconds $delay
        }
        if (-Not $success) {
          throw "${env:APPLICATION_URL} did not return a successful status code and the expected version within the time limit after $limit attempts."
        }

  test-production:
    needs: deploy-production
    runs-on: ubuntu-latest
    concurrency: production_environment

    permissions:
      contents: read

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0

    - name: Setup NuGet cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Run end-to-end tests
      shell: pwsh
      env:
        WEBSITE_URL: ${{ env.AZURE_URL_PROD }}
      run: dotnet test ./tests/AdventOfCode.Tests --configuration Release --filter Category=EndToEnd --logger "GitHubActions;report-warnings=false" /p:CollectCoverage=false

  deploy-aws:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    needs: [ build, typescript ]
    runs-on: ubuntu-latest
    concurrency: aws_environment

    environment:
      name: aws
      url: ${{ env.AWS_URL_PROD }}

    permissions:
      contents: read
      id-token: write

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: lambda

    - name: Extract CloudFormation Template
      shell: pwsh
      run: |
        $configName = "aws-lambda-tools-defaults.json"
        $packageName = "lambda.zip"
        $templateName = "serverless.template"
        $configPath = Join-Path $pwd $configName
        $packagePath = Join-Path $pwd $packageName
        $templatePath = Join-Path $pwd $templateName
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        $package = [System.IO.Compression.ZipFile]::OpenRead($packagePath)
        $config = $package.GetEntry($configName)
        [System.IO.Compression.ZipFileExtensions]::ExtractToFile($config, $configPath, $true)
        $template = $package.GetEntry($templateName)
        [System.IO.Compression.ZipFileExtensions]::ExtractToFile($template, $templatePath, $true)
        $package.Dispose()

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0

    - name: Install .NET Lambda tool
      shell: pwsh
      env:
        LAMBDA_TOOLS_VERSION: ${{ needs.build.outputs.lambda-tools-version }}
      run: |
        dotnet tool install --global Amazon.Lambda.Tools --version ${env:LAMBDA_TOOLS_VERSION}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
        role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation Template
      shell: pwsh
      env:
        AWS_CLOUDFORMATION_ROLE: ${{ secrets.AWS_CLOUDFORMATION_ROLE }}
        AWS_CLOUDFORMATION_STACK: adventofcode
      run: |
        $description = "Deploy build ${env:GITHUB_RUN_NUMBER} to AWS via GitHub Actions"
        $configPath = Join-Path $pwd "aws-lambda-tools-defaults.json"
        $packagePath = Join-Path $pwd "lambda.zip"
        dotnet-lambda `
            deploy-serverless `
            ${env:AWS_CLOUDFORMATION_STACK} `
            --cloudformation-role ${env:AWS_CLOUDFORMATION_ROLE} `
            --config-file $configPath `
            --disable-interactive true `
            --package $packagePath `
            --stack-wait true `
            --tags "GITHUB_ACTIONS_RUN=${env:GITHUB_RUN_NUMBER}" `
            --template-substitutions "Description=$description"

    - name: Check application health
      shell: pwsh
      env:
        APPLICATION_URL: ${{ env.AWS_URL_PROD }}
      run: |
        $delay = 10
        $limit = 15
        $success = $false
        for ($i = 0; $i -lt $limit; $i++) {
          $response = $null
          try {
            $response = Invoke-WebRequest -Uri "${env:APPLICATION_URL}/version" -Method Get -UseBasicParsing
          } catch {
            $response = $_.Exception.Response
          }
          if (($null -ne $response) -And ($response.StatusCode -eq 200)) {
            $json = $response.Content | ConvertFrom-Json
            $version = $json.applicationVersion
            if ((-Not [string]::IsNullOrWhiteSpace($version)) -And $version.Contains(${env:GITHUB_SHA})) {
              $success = $true
              break
            }
          }
          Start-Sleep -Seconds $delay
        }
        if (-Not $success) {
          throw "${env:APPLICATION_URL} did not return a successful status code and the expected version within the time limit after $limit attempts."
        }

  test-aws:
    needs: deploy-aws
    runs-on: ubuntu-latest
    concurrency: aws_environment

    permissions:
      contents: read

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0

    - name: Setup NuGet cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Run end-to-end tests
      shell: pwsh
      env:
        WEBSITE_URL: ${{ env.AWS_URL_PROD }}
      run: dotnet test ./tests/AdventOfCode.Tests --configuration Release --filter Category=EndToEnd --logger "GitHubActions;report-warnings=false" /p:CollectCoverage=false

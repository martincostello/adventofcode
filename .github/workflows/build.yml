name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

env:
  AWS_CLOUDFORMATION_STACK: adventofcode
  AWS_REGION: eu-west-2
  AWS_URL_PROD: https://aoc.martincostello.com/
  AZURE_URL_PROD: https://advent--of--code.azurewebsites.net/
  AZURE_WEBAPP_NAME: advent--of--code
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_MULTILEVEL_LOOKUP: 0
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  FORCE_COLOR: 1
  NUGET_XMLDOC_MODE: skip
  PUBLISH_RUNTIME: win-x64
  TERM: xterm
  # HACK Workaround until changes from martincostello/lambda-test-server#403 can be used
  AWS_LAMBDA_DOTNET_DISABLE_MEMORY_LIMIT_CHECK: true

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: echo "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Install .NET Lambda tool
      shell: pwsh
      run: dotnet tool install --global Amazon.Lambda.Tools

    - name: Build, test and publish
      shell: pwsh
      run: ./build.ps1 -Runtime "${env:PUBLISH_RUNTIME}"

    - name: Publish web app
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows' && success()
      with:
        name: webapp
        path: ./artifacts/publish/AdventOfCode.Site/release_${{ env.PUBLISH_RUNTIME }}
        if-no-files-found: error

    - name: Publish lambda
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows' && success()
      with:
        name: lambda
        path: ./artifacts/publish/lambda.zip
        if-no-files-found: error

    - name: Publish screenshots
      uses: actions/upload-artifact@v3
      if: ${{ !cancelled() }}
      with:
        name: screenshots
        path: ./artifacts/screenshots/*.png
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@v3
      if: ${{ !cancelled() }}
      with:
        name: traces
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@v3
      if: ${{ !cancelled() }}
      with:
        name: videos
        path: ./artifacts/videos/*
        if-no-files-found: ignore

  typescript:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: echo "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Build and test
      shell: pwsh
      working-directory: ./src/AdventOfCode.Site
      run: |
        npm ci
        npm run all

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./src/AdventOfCode.Site/coverage/lcov.info

  deploy:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    name: deploy-production
    needs: [ build, typescript ]
    runs-on: windows-latest
    concurrency: production_environment

    environment:
      name: production
      url: ${{ env.AZURE_URL_PROD }}

    permissions:
      id-token: write

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: webapp

    - name: Azure log in
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      id: deploy_production
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}

  test:
    name: test-production
    needs: deploy
    runs-on: ubuntu-latest
    concurrency: production_environment

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Run end-to-end tests
      shell: pwsh
      env:
        WEBSITE_URL: ${{ env.AZURE_URL_PROD }}
      run: dotnet test ./tests/AdventOfCode.Tests --configuration Release --filter Category=EndToEnd --logger "GitHubActions;report-warnings=false" /p:CollectCoverage=false

  deploy-aws:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    name: deploy-aws
    needs: [ build, typescript ]
    runs-on: ubuntu-latest
    concurrency: aws_environment

    environment:
      name: aws
      url: ${{ env.AWS_URL_PROD }}

    permissions:
      id-token: write

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambda

    - name: Extract CloudFormation Template
      shell: pwsh
      run: |
        $configName = "aws-lambda-tools-defaults.json"
        $packageName = "lambda.zip"
        $templateName = "serverless.template"
        $configPath = Join-Path $pwd $configName
        $packagePath = Join-Path $pwd $packageName
        $templatePath = Join-Path $pwd $templateName
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        $package = [System.IO.Compression.ZipFile]::OpenRead($packagePath)
        $config = $package.GetEntry($configName)
        [System.IO.Compression.ZipFileExtensions]::ExtractToFile($config, $configPath, $true)
        $template = $package.GetEntry($templateName)
        [System.IO.Compression.ZipFileExtensions]::ExtractToFile($template, $templatePath, $true)
        $package.Dispose()

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Install .NET Lambda tool
      shell: pwsh
      run: dotnet tool install --global Amazon.Lambda.Tools

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
        role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation Template
      shell: pwsh
      env:
        AWS_CLOUDFORMATION_ROLE: ${{ secrets.AWS_CLOUDFORMATION_ROLE }}
      run: |
        $description = "Deploy build ${env:GITHUB_RUN_NUMBER} to AWS via GitHub Actions"
        $configPath = Join-Path $pwd "aws-lambda-tools-defaults.json"
        $packagePath = Join-Path $pwd "lambda.zip"
        dotnet-lambda `
            deploy-serverless `
            ${env:AWS_CLOUDFORMATION_STACK} `
            --cloudformation-role ${env:AWS_CLOUDFORMATION_ROLE} `
            --config-file $configPath `
            --disable-interactive true `
            --package $packagePath `
            --stack-wait true `
            --tags "GITHUB_ACTIONS_RUN=${env:GITHUB_RUN_NUMBER}" `
            --template-substitutions "Description=$description"

  test-aws:
    name: test-aws
    needs: deploy-aws
    runs-on: ubuntu-latest
    concurrency: aws_environment

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Run end-to-end tests
      shell: pwsh
      env:
        WEBSITE_URL: ${{ env.AWS_URL_PROD }}
      run: dotnet test ./tests/AdventOfCode.Tests --configuration Release --filter Category=EndToEnd --logger "GitHubActions;report-warnings=false" /p:CollectCoverage=false
